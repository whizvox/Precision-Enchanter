plugins {
  id 'net.minecraftforge.gradle' version '5.1.+'
  id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

group = 'me.whizvox.precisionenchanter'
version = '1.19.3-dev-20230217.4'

java {
  archivesBaseName = 'precisionenchanter'
  toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
  mappings channel: 'parchment', version: '2022.12.18-1.19.3'
  // fallback mappings
  //mappings channel: 'official', version: '1.19.3'
  //accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
  runs {
    client {
      workingDirectory project.file('run')
      property 'forge.logging.markers', 'REGISTRIES'
      property 'forge.logging.console.level', 'debug'
      property 'forge.enabledGameTestNamespaces', 'precisionenchanter'

      mods {
        precisionenchanter {
          source sourceSets.main
        }
      }
    }

    server {
      workingDirectory project.file('runserver')
      property 'forge.logging.markers', 'REGISTRIES'
      property 'forge.logging.console.level', 'debug'
      property 'forge.enabledGameTestNamespaces', 'precisionenchanter'
      mods {
        precisionenchanter {
          source sourceSets.main
        }
      }
    }

    gameTestServer {
      workingDirectory project.file('run')
      property 'forge.logging.markers', 'REGISTRIES'
      property 'forge.logging.console.level', 'debug'
      property 'forge.enabledGameTestNamespaces', 'precisionenchanter'
      mods {
        precisionenchanter {
          source sourceSets.main
        }
      }
    }

    data {
      workingDirectory project.file('run')
      property 'forge.logging.markers', 'REGISTRIES'
      property 'forge.logging.console.level', 'debug'
      args '--mod', 'precisionenchanter', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
      mods {
        precisionenchanter {
          source sourceSets.main
        }
      }
    }
  }
}

// Include resources generated by data generators
sourceSets.main.resources {
  // Include all files
  include '**/**'
  // ...but exclude dev-only files, such as Blockbench model files, Photoshop files, and the .cache from data
  // generation
  exclude '**/*.bbmodel'
  exclude '**/*.psd'
  exclude '.cache'
  srcDir 'src/generated/resources'
}

repositories {
  maven {
    url = "https://modmaven.dev/"
  }
  maven {
    name 'CurseMaven'
    url "https://www.cursemaven.com"
    content {
      includeGroup "curse.maven"
    }
  }
}

sourceSets {
  checkVersion {
    java {
      srcDirs('src/checkversion')
    }
  }
}

dependencies {
  minecraft 'net.minecraftforge:forge:1.19.3-44.1.1'

  implementation fg.deobf("teamtwilight:twilightforest:4.2.1549:universal")

  checkVersionImplementation 'commons-cli:commons-cli:1.5.0'
}

jar {
  manifest {
    attributes([
        "Specification-Title"     : "precisionenchanter",
        "Specification-Vendor"    : "whizvox",
        "Specification-Version"   : "1",
        "Implementation-Title"    : project.name,
        "Implementation-Version"  : project.jar.archiveVersion,
        "Implementation-Vendor"   : "whizvox",
        "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    ])
  }
}

jar.finalizedBy('reobfJar')

jar {
  // don't include data generation package in final JAR file
  exclude 'me/whizvox/precisionenchanter/data/**'
}

tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

tasks.register('checkRemoteVersion', JavaExec) {
  group = 'other'
  description = 'Compare remote project version with local'
  classpath = sourceSets.checkVersion.runtimeClasspath
  mainClass.set('me.whizvox.precisionenchanting.CheckRemoteVersion')
}
